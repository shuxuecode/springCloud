<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"

       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://code.alibabatech.com/schema/dubbo
                           http://code.alibabatech.com/schema/dubbo/dubbo.xsd"
>

    <!-- 应用信息配置。对应的配置类：org.apache.dubbo.config.ApplicationConfig
        name : 当前应用名称，用于注册中心计算应用间依赖关系，注意：消费者和提供者应用名不要一样，此参数不是匹配条件，你当前项目叫什么名字就填什么，和提供者消费者角色无关，比如：kylin应用调用了morgan应用的服务，则kylin项目配成kylin，morgan项目配成morgan，可能kylin也提供其它服务给别人使用，但kylin项目永远配成kylin，这样注册中心将显示kylin依赖于morgan
        version : 当前应用的版本
    -->
    <dubbo:application name="springboot-dubbo-provider2"/>

    <!--  注册中心配置。对应的配置类： org.apache.dubbo.config.RegistryConfig
        address : 注册中心服务器地址，如果地址没有端口缺省为9090，同一集群内的多个地址用逗号分隔，如：ip:port,ip:port，不同集群的注册中心，请配置多个<dubbo:registry>标签
        id : 注册中心引用BeanId，可以在<dubbo:service registry="">或<dubbo:reference registry="">中引用此ID
        protocol : 注册中心地址协议，支持dubbo, multicast, zookeeper, redis, consul(2.7.1), sofa(2.7.2), etcd(2.7.2), nacos(2.7.2)等协议
        port : 注册中心缺省端口，当address没有带端口时使用此端口做为缺省值，默认9090
        username ：登录注册中心用户名，如果注册中心不需要验证可不填
        password ：登录注册中心密码，如果注册中心不需要验证可不填
        transport ： 网络传输方式，可选mina,netty
        timeout ： 注册中心请求超时时间(毫秒) ，默认5000
        session ： 注册中心会话超时时间(毫秒)，用于检测提供者非正常断线后的脏数据，比如用心跳检测的实现，此时间就是心跳间隔，不同注册中心实现不一样。默认60000
        file ： 使用文件缓存注册中心地址列表及服务提供者列表，应用重启时将基于此文件恢复，注意：两个注册中心不能使用同一文件存储
        wait : 停止时等待通知完成时间(毫秒)
        check : 注册中心不存在时，是否报错
        register : 是否向此注册中心注册服务，如果设为false，将只订阅，不注册
        subscribe : 是否向此注册中心订阅服务，如果设为false，将只注册，不订阅
        dynamic : 服务是否动态注册，如果设为false，注册后将显示为disable状态，需人工启用，并且服务提供者停止时，也不会自动取消注册，需人工禁用。
        group : 服务注册分组，跨组的服务不会相互影响，也无法相互调用，适用于环境隔离

    -->
    <dubbo:registry address="zookeeper://127.0.0.1:2181"/>

    <!--  使用dubbo协议在20880端口暴露服务  -->
    <dubbo:protocol name="dubbo" port="20880"/>

    <!--
        threads : 服务线程池大小(固定大小)，默认200
        accepts : 服务提供者最大可接受连接数
    -->
    <dubbo:provider timeout="30000" threadpool="fixed" threads="50" accepts="1000" accesslog="true"/>

    <dubbo:consumer check="false"/>


    <dubbo:service interface="com.zsx.service.DemoService" ref="demoServiceImpl"/>

    <!--
        interface : 服务接口名
        ref : 服务对象实现引用
        version : 服务版本，缺省值：0.0.0
        group : 服务分组，当一个接口有多个实现，可以用分组区分
        delay : 延迟注册服务时间(毫秒) ，设为-1时，表示延迟到Spring容器初始化完成时暴露服务
        timeout : 远程服务调用超时时间(毫秒)
        retries : 远程服务调用重试次数，不包括第一次调用，不需要重试请设为0，默认值为2
        connections : 对每个提供者的最大连接数，rmi、http、hessian等短连接协议表示限制连接数，dubbo等长连接协表示建立的长连接个数，默认值为100
        loadbalance ： 负载均衡策略，可选值：random,roundrobin,leastactive，分别表示：随机，轮询，最少活跃调用
        async ： 是否缺省异步执行，不可靠异步，只是忽略返回值，不阻塞执行线程

        mock ： 设为true，表示使用缺省Mock类名，即：接口名 + Mock后缀，服务接口调用失败Mock实现类，该Mock类必须有一个无参构造函数，与Local的区别在于，Local总是被执行，而Mock只在出现非业务异常(比如超时，网络异常等)时执行，Local在远程调用之前执行，Mock在远程调用后执行。
        token ： 令牌验证
        registry ： 向指定注册中心注册
        weight ： 服务权重
        executes ： 服务提供者每服务每方法最大可并行执行请求数
        proxy ： 生成动态代理方式，可选：jdk/javassist， 默认为javassist
        cluster ： 集群方式，可选：failover/failfast/failsafe/failback/forking
        filter ： 服务提供方远程调用过程拦截器名称，多个名称用逗号分隔
        listener ： 服务提供方导出服务监听器名称，多个名称用逗号分隔
        protocol ： 使用指定的协议暴露服务，在多协议时使用，值为<dubbo:protocol>的id属性，多个协议ID用逗号分隔
        register ： 该协议的服务是否注册到注册中心，默认为true

    -->
    <dubbo:service interface="com.zsx.client.service.DubboService" ref="dubboServiceImpl" version="1.0.0"/>


    <!-- 使用注解方式暴露接口，会自动扫描package下所有包中dubbo相关的注解，这样就不用在xml中再针对每个服务接口配置dubbo:service interface-->
    <!-- <dubbo:annotation package="com.srpingboot.example"/> -->
    <!--   这种方式过时了 todo -->



</beans>